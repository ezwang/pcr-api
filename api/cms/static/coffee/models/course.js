// Generated by CoffeeScript 1.6.3
(function() {
  var course_attrs, root, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.app = root.app ? root.app : {
    models: {},
    collections: {},
    views: {},
    templates: {}
  };

  course_attrs = {
    course_id: 'Default Course Id',
    department: 'default department',
    section: '110',
    name: 'Default Course Name',
    user: void 0,
    professor: 'professory dude',
    status: 'In Progress',
    category: 'Wharton'
  };

  root.app.models.Course = (function(_super) {
    __extends(Course, _super);

    function Course() {
      _ref = Course.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Course.prototype.STATUSES = ['In Progress', 'Finished', 'Approved'];

    Course.prototype.defaults = function() {
      return course_attrs;
    };

    Course.prototype.initialize = function() {
      this.set('reviews', Math.round(Math.random() * 100));
      if (root.courses) {
        return root.courses.add(this);
      }
    };

    Course.prototype.activate = function() {};

    Course.prototype.clear = function() {
      this.destroy();
      return this.view.remove();
    };

    Course.prototype.matches_at = function(search_query, search_type) {
      if (search_type === 'user') {
        console.log('searching by user');
        return this.get(search_type).get('name').toLowerCase().indexOf(search_query.toLowerCase());
      } else {
        return this.get(search_type).toLowerCase().indexOf(search_query.toLowerCase());
      }
    };

    return Course;

  })(Backbone.RelationalModel);

  root.app.models.Course.setup();

  root.app.collections.Courses = (function(_super) {
    __extends(Courses, _super);

    function Courses() {
      _ref1 = Courses.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Courses.prototype.model = root.app.models.Course;

    Courses.prototype.comparator = function(model) {
      var sort_by;
      sort_by = model.get(this.by);
      if (this.by === 'user' && model.get(this.by)) {
        return sort_by = model.get(this.by).id;
      } else {
        return sort_by;
      }
    };

    Courses.prototype.initialize = function() {
      this.by = "name";
      return this.headers = _.filter(_.keys(course_attrs), function(input) {
        return input.indexOf('id') === -1;
      });
    };

    Courses.prototype.search_by_type = function(search_term, search_type) {
      var _this = this;
      if (search_term == null) {
        search_term = '';
      }
      if (search_type == null) {
        search_type = 'name';
      }
      return this.filter(function(course) {
        return course.matches_at(search_term, search_type) !== -1;
      });
    };

    return Courses;

  })(Backbone.Collection);

}).call(this);
