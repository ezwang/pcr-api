// Generated by CoffeeScript 1.6.3
(function() {
  var root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  app.views.StatView = (function(_super) {
    __extends(StatView, _super);

    function StatView() {
      _ref = StatView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StatView.prototype.template = app.templates.stat_view;

    StatView.prototype.tagName = 'div';

    StatView.prototype.id = 'stats';

    StatView.prototype.expanded = false;

    StatView.prototype.auto_height = '0px';

    StatView.prototype.contract_height = '20px';

    StatView.prototype.events = {
      "keyup #course-search": "search",
      "click": "toggle"
    };

    StatView.prototype.render = function() {
      var course_categories, course_statuses, user_specialties,
        _this = this;
      course_categories = _.unique(root.courses.pluck('category'));
      course_statuses = _.unique(root.courses.pluck('status'));
      user_specialties = _.unique(root.users.pluck('specialty'));
      this.course_stats = {
        statuses: {},
        categories: {}
      };
      this.user_stats = {};
      _.each(course_categories, function(item) {
        return _this.course_stats.categories[item] = root.courses.where({
          category: item
        }).length;
      });
      _.each(course_statuses, function(item) {
        return _this.course_stats.statuses[item] = root.courses.where({
          status: item
        }).length;
      });
      _.each(user_specialties, function(item) {
        return _this.user_stats[item] = root.users.where({
          specialty: item
        }).length;
      });
      this.user_stats['Total'] = root.users.length;
      this.$el.html(_.template(this.template, {
        course_stats: this.course_stats,
        user_stats: this.user_stats
      }));
      return this;
    };

    StatView.prototype.initialize = function() {
      return this.$el.height(this.contract_height);
    };

    StatView.prototype.search = function(e) {
      return root.search_vent.trigger('course:search_by', {
        search_type: $('select option:selected').html()
      });
    };

    StatView.prototype.toggle = function() {
      if (parseInt(this.auto_height) === 0) {
        this.$el.height('auto');
        this.auto_height = this.$el.height();
        this.$el.height(this.contract_height);
      }
      if (!this.expanded) {
        this.$el.find('i').removeClass('icon-chevron-down').addClass('icon-chevron-up');
        this.$el.stop().animate({
          height: this.auto_height
        }, 200, function() {});
      } else {
        this.$el.find('i').removeClass('icon-chevron-up').addClass('icon-chevron-down');
        this.$el.stop().animate({
          height: this.contract_height
        }, 200, function() {});
      }
      return this.expanded = !this.expanded;
    };

    return StatView;

  })(Backbone.View);

}).call(this);
