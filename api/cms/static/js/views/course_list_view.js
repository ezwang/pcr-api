// Generated by CoffeeScript 1.6.3
(function() {
  var root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  app.views.CourseListView = (function(_super) {
    __extends(CourseListView, _super);

    function CourseListView() {
      _ref = CourseListView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CourseListView.prototype.template = app.templates.course_table;

    CourseListView.prototype.tagName = 'div';

    CourseListView.prototype.className = 'course-list';

    CourseListView.prototype.selectedUser = null;

    CourseListView.prototype.currentPage = '1';

    CourseListView.prototype.course_list = [];

    CourseListView.prototype.events = {
      "click th": "sort_reviews",
      "click .paginate": "paginate"
    };

    CourseListView.prototype.render = function(search_data) {
      var course_list_els, current, data, push_courses, search_query, search_results, user_id, _ref1,
        _this = this;
      if (search_data == null) {
        search_data = {};
      }
      user_id = (_ref1 = this.selectedUser) != null ? _ref1.id : void 0;
      data = user_id ? this.collection.where({
        user: user_id
      }) : [];
      this.$el.html(_.template(this.template, {
        headers: this.collection.headers,
        selected: this.collection.by
      }));
      this.course_list = [];
      push_courses = function(course) {
        var course_view;
        course_view = new app.views.CourseView({
          model: course,
          selected_user: _this.selectedUser
        });
        return _this.course_list.push(course_view);
      };
      search_query = $('#course-search').val();
      search_results = this.collection.search_by_type(search_query, search_data.search_type);
      _(_.intersection(data, search_results)).each(function(item) {
        return push_courses(item);
      });
      _(_.difference(search_results, data)).each(function(item) {
        return push_courses(item);
      });
      current = this.course_list.slice(this.currentPage - 1, 100);
      console.log(current.length);
      course_list_els = _.map(current, function(v) {
        return v.render().el;
      });
      this.$el.find('tbody').html(course_list_els);
      return this;
    };

    CourseListView.prototype.initialize = function() {
      this.listenTo(this.collection, 'add', this.render);
      this.listenTo(this.collection, 'sort', this.render);
      this.listenTo(root.match_vent, 'select_user', this.filter_by_user);
      return this.listenTo(root.search_vent, 'course:search_by', this.render);
    };

    CourseListView.prototype.paginate = function(e) {
      var course_list_els, current, idv, index_number;
      e.preventDefault();
      idv = e.currentTarget.id;
      if (idv === 'backward') {
        if (this.currentPage !== 1) {
          this.currentPage--;
        }
      } else {
        if (this.currentPage * 100 + 100 < this.course_list.length) {
          this.currentPage++;
        }
      }
      index_number = (this.currentPage - 1) * 100;
      current = this.course_list.slice(index_number, +(index_number + 100) + 1 || 9e9);
      course_list_els = _.map(current, function(v) {
        return v.render().el;
      });
      this.$el.find('tbody').html(course_list_els);
      return this;
    };

    CourseListView.prototype.sort_reviews = function(e) {
      e.preventDefault();
      this.collection.by = $(e.target).attr('data-by');
      return this.collection.sort();
    };

    CourseListView.prototype.filter_by_user = function(data) {
      this.selectedUser = data.user;
      return this.render();
    };

    return CourseListView;

  })(Backbone.View);

}).call(this);
