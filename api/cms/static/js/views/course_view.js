// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.CourseView = (function(_super) {
    __extends(CourseView, _super);

    function CourseView() {
      _ref = CourseView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CourseView.prototype.template = app.templates.course;

    CourseView.prototype.tagName = 'tr';

    CourseView.prototype.selected = false;

    CourseView.prototype.selected_user = void 0;

    CourseView.prototype.events = {
      "click": "assign_course"
    };

    CourseView.prototype.render = function() {
      this.$el.html(_.template(this.template, {
        headers: this.model.collection.headers,
        attributes: this.model.attributes
      }));
      if (this.model.get('user') && this.model.get('user') === this.selected_user) {
        this.$el.addClass('selected');
      } else {
        this.$el.removeClass('selected');
      }
      if (this.model.get('user')) {
        this.$el.css('color', this.model.get('user').get('color'));
      }
      return this;
    };

    CourseView.prototype.initialize = function(options) {
      this.selected_user = options.selected_user;
      if (options.selected_user) {
        this.selected = this.selected_user === this.model.attributes.user;
      }
      this.model.bind('change', this.jbcima, this);
      return this.render();
    };

    CourseView.prototype.assign_course = function(e) {
      if (this.selected_user) {
        this.selected = !this.selected;
        this.select_course();
        return this.render();
      }
    };

    CourseView.prototype.select_course = function() {
      if (!this.selected) {
        this.model.set('user', void 0);
        this.$el.css('color', 'black');
        this.$el.removeClass('selected');
        return;
      }
      this.model.save({
        user: this.selected_user
      });
      console.log(this.model.attributes.user);
      this.$el.addClass('selected');
      this.$el.find('input[type=checkbox]').prop('checked', true);
      return this.model.attributes.user = this.selected_user ? this.selected_user : this.$el.find('td[data-category="user"]').html();
    };

    return CourseView;

  })(Backbone.View);

}).call(this);
